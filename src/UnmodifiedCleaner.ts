import { Transform } from 'node:stream';
import fs from 'fs'; // Cannot use prefix to allow mocking
import logger from 'gulplog';
import type Vinyl from 'vinyl';

import readdirRecursive from './readdirRecursive';

export default class UnmodifiedCleaner {
  public preservedFiles = new Set<string>();

  /**
   * Creates a stream transform to capture files generated by a stream.
   *
   * @returns A stream transform to be piped in at the end of a Gulp stream
   * @example ```
   * gulp.src('source/*')
   *   .pipe(gulp.dest('dest'))
   *   .pipe(cleaner.register()
   * ```
   */
  public register(): Transform {
    return new Transform({
      objectMode: true,
      transform: (file: Vinyl, encoding, callback): void => {
        const pathname = file.path as string | undefined; // (Types are inaccurate)
        if (pathname == null) {
          logger.warn('Failed registering file with empty pathname: %s', file);
        } else {
          this.preservedFiles.add(pathname);
        }

        callback(null, file);
      },
    });
  }

  /**
   * Removes files within the provided directory that were not included in the stream `register()` was piped in to.
   *
   * @param directoryPathname The path to the destination directory to clean
   */
  public clean(directoryPathname: string): void {
    this.cleanDir(directoryPathname, true);
  }

  /**
   * Resets the record of files discovered in the stream to be preserved.
   */
  public reset(): void {
    this.preservedFiles = new Set();
  }

  private cleanDir(pathname: string, isRoot: boolean): void {
    for (const entry of readdirRecursive(pathname)) {
      if (entry.isDirectory) {
        this.cleanDir(entry.pathname, false);
      } else {
        this.cleanFile(entry.pathname);
      }
    }

    if (!isRoot && fs.readdirSync(pathname).length === 0) {
      // Empty directory - remove
      fs.rmdirSync(pathname);
      logger.debug('Cleaning empty directory "%s"', pathname);
    }
  }

  private cleanFile(pathname: string): void {
    if (!this.preservedFiles.has(pathname)) {
      // Unmodified file - remove
      fs.unlinkSync(pathname);
      logger.debug('Cleaning file "%s"', pathname);
    }
  }
}
